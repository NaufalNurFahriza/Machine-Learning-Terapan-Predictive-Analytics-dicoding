# -*- coding: utf-8 -*-
"""PredictiveAnalytics_notebook_Saham.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/NaufalNurFahriza/Machine-Learning-Terapan-Predictive-Analytics-dicoding/blob/main/PredictiveAnalytics_notebook_Saham.ipynb

# Prediksi Harga Saham PT Telekomunikasi Indonesia Tbk (TLKM.JK) Menggunakan LSTM

## Latar Belakang
PT Telekomunikasi Indonesia Tbk (TLKM) adalah perusahaan telekomunikasi terbesar di Indonesia.
Harga sahamnya menjadi indikator penting bagi investor yang ingin memantau perkembangan sektor ini.
Dengan bantuan algoritma *Long Short-Term Memory (LSTM)*, kita dapat memprediksi harga saham berdasarkan data historis.

# Importing Needed Libraries

Pertama, kita mengimpor pustaka-pustaka penting yang akan digunakan untuk analisis data, visualisasi, dan pembangunan model:  

- **math** untuk operasi matematika dasar  
- **numpy (np)** dan **pandas (pd)** untuk manipulasi data numerik dan terstruktur  
- **seaborn (sns)** dan **matplotlib.pyplot (plt)** untuk visualisasi data dengan gaya yang telah dikonfigurasi  
- **keras** untuk membangun dan melatih model deep learning  
- **Sequential, LSTM, Dense, Dropout** dari Keras untuk arsitektur model jaringan saraf  
- **EarlyStopping** dari Keras untuk menghentikan pelatihan secara otomatis ketika model tidak mengalami peningkatan  
- **MinMaxScaler** dari scikit-learn untuk normalisasi data  
- **train_test_split** dari scikit-learn untuk membagi dataset  
- **mean_squared_error, mean_absolute_error, mean_absolute_percentage_error** dari scikit-learn untuk evaluasi performa model  

Berikut adalah kode implementasinya:
"""

import math
import numpy as np
import pandas as pd
import seaborn as sns
sns.set_style('whitegrid')
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")

import keras
from keras.models import Sequential
from keras.callbacks import EarlyStopping
from keras.layers import Dense, LSTM, Dropout

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error

"""# Reading and Understanding the Dataset

### About the Dataset  
Dataset ini berisi data historis saham **PT Telekomunikasi Indonesia Tbk (TLKM.JK)** yang diperdagangkan di **Bursa Efek Indonesia (BEI)** dari tahun **2019 hingga 2024**.  

### Kolom-kolom dalam Dataset:  
- **Date**: Tanggal pencatatan data (format: `DD/MM/YYYY`).  
- **Open**: Harga pembukaan saham di awal sesi perdagangan.  
- **High**: Harga tertinggi yang dicapai dalam satu hari perdagangan.  
- **Low**: Harga terendah yang dicapai dalam satu hari perdagangan.  
- **Close**: Harga penutupan saham di akhir sesi perdagangan.  
- **Adj Close**: Harga penutupan yang disesuaikan (termasuk dividen, stock split, dll.).  
- **Volume**: Jumlah saham yang diperdagangkan (dalam format angka dengan titik, perlu konversi ke numerik).  

Dataset terdiri dari **1.212 entri**, cocok untuk analisis tren, prediksi harga, dan pemodelan time series.

## Memuat Dataset dari Kaggle  

### Langkah 1: Mengautentikasi Kaggle API  
Sebelum mengunduh dataset, pastikan **kaggle.json** (berisi API key) sudah diunggah.
"""

# Upload kaggle.json yang didapatkan dari akun Kaggle
from google.colab import files
files.upload()

"""### Langkah 2: Konfigurasi Direktori Kaggle"""

# Buat direktori dan ubah izin file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""### Langkah 3: Mengunduh Dataset  
Dataset diunduh dari:  
ðŸ“Œ [Kaggle: Dataset Saham TLKM.JK](https://www.kaggle.com/datasets/irfansaputranst/dataset-saham-tlkm-jk)  
"""

# Download dataset dari Kaggle
!kaggle datasets download -d irfansaputranst/dataset-saham-tlkm-jk
# Unzip file ZIP hasil download
!unzip dataset-saham-tlkm-jk.zip

"""### Langkah 4: Membaca Dataset ke DataFrame  """

import pandas as pd

# Muat dataset dan atur kolom 'Date' sebagai index
df = pd.read_csv(
    'SAHAM - PT Telekomunikasi Indonesia Tbk (TLKM.JK) - Sheet1.csv',
    parse_dates=['Date'],  # Otomatis konversi ke datetime
    index_col='Date'       # Gunakan 'Date' sebagai index
)

# Tampilkan 5 baris pertama
print(df.head())

"""# Eksplorasi Dataset Saham TLKM

## **1. Memuat dan Membersihkan Data**
Dataset saham TLKM dimuat dari file CSV dengan kolom `Date` dijadikan sebagai indeks. Kolom `Volume` dibersihkan dengan menghilangkan tanda titik (.) dan dikonversi ke tipe numerik.

## Statistik Deskriptif
Menampilkan informasi ringkas tentang jumlah data, tipe data, dan apakah ada nilai yang hilang.
"""

import pandas as pd

# Memuat dataset
df = pd.read_csv(
    'SAHAM - PT Telekomunikasi Indonesia Tbk (TLKM.JK) - Sheet1.csv',
    parse_dates=['Date'],  # Mengonversi kolom 'Date' ke format datetime
    index_col='Date'       # Menggunakan 'Date' sebagai indeks
)

# Membersihkan kolom 'Volume' (format angka dengan titik)
df['Volume'] = df['Volume'].str.replace('.', '', regex=False).astype(float)

"""## **2. Statistik Deskriptif**
### **Menampilkan Informasi Dataset**
Fungsi `df.info()` memberikan ringkasan tentang struktur dataset, termasuk:
- Jumlah entri (**1.212 data**)
- Kolom-kolom yang ada (`Adj Close`, `Close`, `High`, `Low`, `Open`, `Volume`)
- Tipe data masing-masing kolom (semua numerik `float64`)
- Tidak ada nilai yang hilang (**Non-Null Count = 1.212**)
"""

df.info()

"""### **Deskripsi Statistik Numerik**
Fungsi `df.describe()` memberikan gambaran statistik seperti:
- **Rata-rata (mean)**: Harga saham TLKM berkisar di **Rp 3.232 (Adj Close)** hingga **Rp 3.690 (High)**.
- **Standar deviasi (std)**: Variasi harga cukup tinggi (~Rp 500).
- **Nilai minimum/maksimum**:
  - Harga terendah (`Low`) = **Rp 2.450**
  - Harga tertinggi (`High`) = **Rp 4.850**
  - Volume perdagangan maksimal = **1,15 miliar saham**.
- **Quartile (25%, 50%, 75%)**: Menunjukkan distribusi data.
"""

df.describe()

"""## **3. Analisis Korelasi Antar Variabel**
### **Heatmap Korelasi**
Korelasi dihitung menggunakan `df.corr()` dan divisualisasikan dengan **heatmap** untuk melihat hubungan antar variabel:
- **Harga (`Open`, `Close`, `High`, `Low`) memiliki korelasi sangat kuat (>0.99)**, artinya pergerakan harga sangat terkait.
- **Volume perdagangan memiliki korelasi lemah (~0.1) dengan harga**, menunjukkan volume tidak selalu memengaruhi harga langsung.
"""

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
sns.heatmap(
    df.corr(),
    annot=True,       # Menampilkan nilai korelasi
    cmap='Blues',     # Warna biru gradien
    fmt='.2f',        # Format 2 angka desimal
    linewidths=0.5    # Garis pemisah antar sel
)
plt.title("Korelasi Antar Variabel Saham TLKM")
plt.show()

"""### **Interpretasi Korelasi:**
- **`Open`, `Close`, `High`, `Low` â†’ Korelasi â‰ˆ 1.00**  
  â†’ Harga pembukaan, penutupan, tertinggi, dan terendah sangat berkaitan.
- **`Volume` vs Harga â†’ Korelasi < 0.2**  
  â†’ Volume perdagangan tidak selalu memengaruhi harga saham TLKM secara signifikan.

# **Visualisasi Data Saham TLKM**

## **1. Pergerakan Harga Saham (High & Low)**
Visualisasi ini menunjukkan fluktuasi harga tertinggi (`High`) dan terendah (`Low`) saham TLKM dari 2019 hingga 2024
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(15, 6))  # Ukuran gambar diperbesar
plt.plot(df.index, df['High'], label='Harga Tertinggi (High)', color='blue', alpha=0.7)
plt.plot(df.index, df['Low'], label='Harga Terendah (Low)', color='red', alpha=0.7)

plt.title('Pergerakan Harga Tertinggi & Terendah Saham TLKM (2019â€“2024)')
plt.xlabel(None)
plt.ylabel(None)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Penjelasan**:  
- **Tren**: Terlihat pola naik-turun yang konsisten, dengan puncak tertinggi di atas **Rp 4.800** dan terendah di sekitar **Rp 2.500**.  
- **Volatilitas**: Rentang harian (`High` vs `Low`) cukup lebar, terutama pada periode 2020 (pandemi) dan 2023-2024.  
- **Insight**: Saham TLKM cenderung stabil dengan kenaikan signifikan di akhir 2023.

## **2. Volume Perdagangan Saham**
"""

plt.figure(figsize=(15, 6))
df['Volume'].plot()
plt.ylabel('Volume')
plt.xlabel(None)
plt.title("Volume Perdagangan Saham TLKM")
plt.tight_layout()
plt.show()

"""**Penjelasan**:  
- Volume perdagangan menunjukkan pola musiman dengan beberapa lonjakan signifikan.  
- Terdapat beberapa outlier volume yang sangat tinggi (>800 juta saham).  
- Periode 2022-2023 menunjukkan peningkatan aktivitas perdagangan.
- Baseline volume normal sekitar 50-200 juta saham per hari.

# **Preprocessing Data untuk Model LSTM**

## **1. Normalisasi Data**
"""

# Mengambil kolom target ('Close') dan mengkonversi ke DataFrame
dataset = df[['Close']]  # Menggunakan [[]] untuk mempertahankan format DataFrame
data_values = dataset.values

# Normalisasi data ke range [0,1] menggunakan MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data_values)

"""**Penjelasan**:
- Hanya menggunakan kolom `Close` sebagai target prediksi
- `MinMaxScaler` digunakan untuk menormalkan data ke range 0-1 yang lebih stabil untuk model LSTM
- Format data dipertahankan sebagai numpy array untuk konsistensi

## **2. Pembagian Data Train-Test**
"""

# Membagi data menjadi train (80%) dan test (20%)
train_size = int(len(scaled_data) * 0.8)
test_size = len(scaled_data) - train_size
train_data, test_data = scaled_data[0:train_size,:], scaled_data[train_size:len(scaled_data),:]

print(f"Train Size: {len(train_data)}")
print(f"Test Size: {len(test_data)}")

"""**Penjelasan**:
- Pembagian 80-20 untuk memastikan data latih yang cukup
- Tidak dilakukan shuffling untuk mempertahankan urutan temporal
- Test data diambil dari periode terakhir (paling baru)

## **3. Penyiapan Data Time Series**
"""

# Fungsi untuk membuat dataset berbasis window time series
def create_dataset(data, time_step=60):
    X, y = [], []
    for i in range(time_step, len(data)):
        X.append(data[i-time_step:i, 0])  # 60 time steps sebagai feature
        y.append(data[i, 0])              # Nilai berikutnya sebagai target
    return np.array(X), np.array(y)

# Membuat training set
time_step = 60
X_train, y_train = create_dataset(train_data, time_step)

# Membuat test set
X_test, y_test = create_dataset(test_data, time_step)

# Reshape input untuk LSTM [samples, time steps, features]
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

print(f"X_train shape: {X_train.shape}")
print(f"y_train shape: {y_train.shape}")
print(f"X_test shape: {X_test.shape}")
print(f"y_test shape: {y_test.shape}")

"""**Penjelasan**:
- Setiap sampel terdiri dari 60 time steps (â‰ˆ3 bulan trading) untuk memprediksi 1 step ke depan
- Data direshape ke format 3D yang dibutuhkan LSTM: [samples, timesteps, features]
- Jumlah sampel berkurang karena kebutuhan windowing

# **Modeling dan Evaluasi LSTM untuk Prediksi Harga Saham**

## **1. Arsitektur Model LSTM**
"""

from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from keras.callbacks import EarlyStopping

model = Sequential([
    LSTM(64, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(64, return_sequences=False),
    Dropout(0.2),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(1)
])

model.compile(optimizer='adam',
              loss='mean_squared_error',
              metrics=['mean_absolute_error'])

model.summary()

"""**Penjelasan Arsitektur**:
- **2 Layer LSTM** dengan 64 unit untuk menangkap pola temporal
- **Dropout 20%** untuk mencegah overfitting
- **3 Layer Dense** dengan aktivasi ReLU untuk pemrosesan non-linear
- Optimizer Adam dengan loss function MSE (Mean Squared Error)
- Metrik evaluasi MAE (Mean Absolute Error)

## **2. Pelatihan Model**
"""

early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

history = model.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=100,
    batch_size=32,
    callbacks=[early_stop],
    verbose=1
)

"""**Proses Pelatihan**:
- Early stopping untuk menghentikan pelatihan jika tidak ada perbaikan
- Validasi menggunakan 20% data test
- Batch size 32 untuk efisiensi komputasi
- Maksimal 100 epoch (biasanya berhenti lebih awal karena early stopping)

## **3. Evaluasi Model**

### **Visualisasi Loss dan MAE**
"""

plt.figure(figsize=(12, 6))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.plot(history.history['mean_absolute_error'], label='Training MAE')
plt.plot(history.history['val_mean_absolute_error'], label='Validation MAE')
plt.title('Model Loss dan MAE Selama Pelatihan')
plt.ylabel('Nilai')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""**Interpretasi**:
- Kurva training dan validation loss yang konvergen
- Tidak ada tanda overfitting (gap kecil antara training dan validation)
- MAE akhir di bawah 0.03 dalam skala normalisasi

### **Metrik Evaluasi Kuantitatif**
"""

# Evaluasi pada test set
test_loss, test_mae = model.evaluate(X_test, y_test, verbose=0)

# Membuat prediksi
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))

print(f"\nTest Loss (MSE): {test_loss:.6f}")
print(f"Test MAE: {test_mae:.4f}")
print(f"MAE dalam Skala Aktual: {np.mean(np.abs(predictions - y_test_actual)):.2f} ")

"""## **4. Visualisasi Prediksi vs Aktual**"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Baca data (pastikan format tanggal konsisten)
df = pd.read_csv('SAHAM - PT Telekomunikasi Indonesia Tbk (TLKM.JK) - Sheet1.csv', parse_dates=['Date'], dayfirst=True)  # dayfirst=True untuk format DD/MM
df.set_index('Date', inplace=True)

# Konversi Volume ke numerik (jika ada tanda titik)
df['Volume'] = df['Volume'].str.replace('.', '').astype(float)

# Visualisasi Volume
plt.figure(figsize=(16, 6))
plt.plot(df.index, df['Volume'], color='royalblue', linewidth=1.5)

# Konfigurasi sumbu x
ax = plt.gca()
ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))  # Label tiap 2 bulan
ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))  # Format DD/MM/YYYY

plt.title('VOLUME PERDAGANGAN SAHAM TLKM', fontsize=14, pad=20, fontweight='bold')
plt.xlabel('Tanggal', fontsize=12)
plt.ylabel('Volume (Juta Lembar)', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.6)

# Rotasi label tanggal
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""**Analisis Visual**:
- Prediksi mengikuti pola harga aktual dengan baik
- Beberapa titik deviasi terlihat pada periode volatilitas tinggi
- Model mampu menangkap tren jangka panjang

## **Kesimpulan**:
1. Model mencapai MAE ~150 IDR dalam skala harga aktual
2. Arsitektur LSTM 2 layer cukup efektif untuk pola data ini
3. Hasil prediksi mengikuti tren aktual meski kurang akurat pada fluktuasi tajam
"""