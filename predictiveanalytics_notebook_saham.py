# -*- coding: utf-8 -*-
"""PredictiveAnalytics_notebook_Saham.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/NaufalNurFahriza/Machine-Learning-Terapan-Predictive-Analytics-dicoding/blob/main/PredictiveAnalytics_notebook_Saham.ipynb

# Prediksi Harga Saham PT Telekomunikasi Indonesia Tbk (TLKM.JK) Menggunakan LSTM

## Latar Belakang
PT Telekomunikasi Indonesia Tbk (TLKM) adalah perusahaan telekomunikasi terbesar di Indonesia.
Harga sahamnya menjadi indikator penting bagi investor yang ingin memantau perkembangan sektor ini.
Dengan bantuan algoritma *Long Short-Term Memory (LSTM)*, kita dapat memprediksi harga saham berdasarkan data historis.

# Import Library

Pertama, kita mengimpor pustaka-pustaka penting yang akan digunakan untuk analisis dan pemodelan:
"""

import math
import numpy as np
import pandas as pd
import seaborn as sns
sns.set_style('whitegrid')
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")

import keras
from keras.models import Sequential
from keras.callbacks import EarlyStopping
from keras.layers import Dense, LSTM, Dropout

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error

"""## Memuat Dataset
Dataset berisi data historis harga saham TLKM dari tahun 2019 hingga 2024, termasuk harga pembukaan, penutupan, tertinggi, terendah, dan volume perdagangan.
Langkah pertama adalah memuat dataset dan menampilkannya sekilas.
"""

# Upload kaggle.json yang didapatkan dari akun Kaggle
from google.colab import files
files.upload()

# Buat direktori dan ubah izin file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download dataset dari Kaggle
!kaggle datasets download -d irfansaputranst/dataset-saham-tlkm-jk

# Unzip file ZIP hasil download
!unzip dataset-saham-tlkm-jk.zip

"""## Statistik Deskriptif
Menampilkan informasi ringkas tentang jumlah data, tipe data, dan apakah ada nilai yang hilang.
"""

df = pd.read_csv('SAHAM - PT Telekomunikasi Indonesia Tbk (TLKM.JK) - Sheet1.csv',
                 parse_dates=['Date'],
                 index_col='Date')

# Bersihkan kolom Volume
df['Volume'] = df['Volume'].str.replace('.', '', regex=False).astype(float)

"""### Deskripsi Statistik Data
Menampilkan statistik seperti mean, standar deviasi, min, dan max untuk memahami skala nilai pada setiap kolom.

Menampilkan Informasi Tiap Variabel
"""

df.info()

"""## Korelasi Antar Variabel
Menggunakan heatmap untuk mengidentifikasi hubungan antar fitur, seperti harga pembukaan, penutupan, tertinggi, terendah, dan volume.
"""

df.describe()

"""Menampilkan Korelasi antar Variabel"""

## Visualisasi Harga Saham TLKM
Menampilkan grafik pergerakan harga saham (High dan Low) dari waktu ke waktu untuk memahami tren dan volatilitas.

"""Visualisasi Harga Saham"""

## Memilih Kolom yang Akan Diprediksi
Untuk model prediksi, kita memilih kolom `Close` karena mencerminkan harga penutupan saham tiap hari.

"""# Preprocessing The Data

## Normalisasi Data
Sebelum data digunakan pada model LSTM, data perlu dinormalisasi ke dalam rentang [0, 1] menggunakan MinMaxScaler.
"""

dataset = df['Close']
dataset = pd.DataFrame(dataset)
data = dataset.values

"""## Pembagian Data
Dataset dibagi menjadi data latih (80%) dan data uji (20%) untuk melatih dan mengevaluasi performa model secara adil.
"""

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(np.array(data).reshape(-1, 1))

"""Membagi Data"""

## Membuat Dataset Pelatihan Berbasis Time Series
Model LSTM membutuhkan input berurutan. Maka, kita membuat window dengan 60 langkah waktu untuk memprediksi 1 nilai ke depan.

"""Membuat Training Set"""

x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

"""## Menyiapkan Input untuk LSTM
Data diubah menjadi format 3 dimensi: `(samples, time_steps, features)` agar sesuai dengan input model LSTM.

Struktur Model
"""

model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(64, return_sequences=False),
    Dropout(0.2),
    Dense(32),
    Dense(16),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse', metrics=["mean_absolute_error"])
model.summary()

"""## Arsitektur Model LSTM
Model LSTM terdiri dari 2 layer LSTM dengan Dropout di antaranya, serta beberapa layer Dense di akhir untuk prediksi regresi.
"""

callbacks = [EarlyStopping(monitor='loss', patience=10, restore_best_weights=True)]
history = model.fit(x_train, y_train, epochs=100, batch_size=128, callbacks=callbacks)

"""# Evaluasi Model"""

## Visualisasi Loss Selama Pelatihan
Menampilkan grafik Mean Squared Error (MSE) dan Mean Absolute Error (MAE) selama proses pelatihan untuk mengevaluasi performa.

"""#Prediksi

Membuat Testing Set
"""

## Menyusun Dataset Pengujian
Membuat input dan target untuk data uji dengan struktur yang sama seperti data latih.

"""Prediksi dan Evaluasi"""

## Evaluasi dan Visualisasi Hasil Prediksi
Menggunakan data uji untuk membuat prediksi dan mengevaluasi performa model. Menampilkan grafik prediksi vs data aktual.

"""Visualisasi Prediksi"""

train = dataset.iloc[:train_size, 0:1]
test = dataset.iloc[train_size:, 0:1]
test['Predictions'] = predictions

plt.figure(figsize=(16, 6))
plt.title('Prediksi Harga Saham TLKM', fontsize=18)
plt.xlabel('Tanggal', fontsize=18)
plt.ylabel('Harga Penutupan', fontsize=18)
plt.plot(train['Close'], linewidth=3)
plt.plot(test['Close'], linewidth=3)
plt.plot(test["Predictions"], linewidth=3)
plt.legend(['Data Latih', 'Data Uji', 'Prediksi'])
plt.show()